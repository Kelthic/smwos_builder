import os
import ctypes
from screeninfo import get_monitors


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–æ–Ω—Å–æ–ª–∏
def set_console_title(title):
    ctypes.windll.kernel32.SetConsoleTitleW(title)

set_console_title("SM: WOS BUILDER")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã —ç–∫—Ä–∞–Ω–∞ —á–µ—Ä–µ–∑ Windows API
def get_screen_refresh_rate():
    class DEVMODE(ctypes.Structure):
        _fields_ = [
            ("dmDeviceName", ctypes.c_wchar * 32),
            ("dmSpecVersion", ctypes.c_ushort),
            ("dmDriverVersion", ctypes.c_ushort),
            ("dmSize", ctypes.c_ushort),
            ("dmDriverExtra", ctypes.c_ushort),
            ("dmFields", ctypes.c_ulong),
            ("dmOrientation", ctypes.c_short),
            ("dmPaperSize", ctypes.c_short),
            ("dmPaperLength", ctypes.c_short),
            ("dmPaperWidth", ctypes.c_short),
            ("dmScale", ctypes.c_short),
            ("dmCopies", ctypes.c_short),
            ("dmDefaultSource", ctypes.c_short),
            ("dmPrintQuality", ctypes.c_short),
            ("dmColor", ctypes.c_short),
            ("dmDuplex", ctypes.c_short),
            ("dmYResolution", ctypes.c_short),
            ("dmTTOption", ctypes.c_short),
            ("dmCollate", ctypes.c_short),
            ("dmFormName", ctypes.c_wchar * 32),
            ("dmLogPixels", ctypes.c_short),
            ("dmBitsPerPel", ctypes.c_ulong),
            ("dmPelsWidth", ctypes.c_ulong),
            ("dmPelsHeight", ctypes.c_ulong),
            ("dmDisplayFlags", ctypes.c_ulong),
            ("dmDisplayFrequency", ctypes.c_ulong),
            ("dmICMMethod", ctypes.c_ulong),
            ("dmICMIntent", ctypes.c_ulong),
            ("dmMediaType", ctypes.c_ulong),
            ("dmDitherType", ctypes.c_ulong),
            ("dmReserved1", ctypes.c_ulong),
            ("dmReserved2", ctypes.c_ulong),
            ("dmPanningWidth", ctypes.c_ulong),
            ("dmPanningHeight", ctypes.c_ulong)
        ]

    ENUM_CURRENT_SETTINGS = -1
    devmode = DEVMODE()
    devmode.dmSize = ctypes.sizeof(DEVMODE)
    if ctypes.windll.user32.EnumDisplaySettingsW(None, ENUM_CURRENT_SETTINGS, ctypes.byref(devmode)):
        return devmode.dmDisplayFrequency
    return 60  # fallback

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —è–¥–µ—Ä CPU
def get_cpu_cores():
    return os.cpu_count() or 4  # fallback

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é
def get_resolution_from_user():
    res_input = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –®–ò–†–ò–ù–ê, –í–´–°–û–¢–ê (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1920, 1080): ")
    try:
        width, height = [x.strip() for x in res_input.split(",")]
        return width, height
    except ValueError:
        print("‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '1920, 1080'")
        exit(1)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
def get_auto_resolution():
    monitor = get_monitors()[0]
    return str(monitor.width), str(monitor.height)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∞ –≤—Ä—É—á–Ω—É—é
def get_refresh_rate_from_user():
    refresh_rate_input = input("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É —ç–∫—Ä–∞–Ω–∞ –≤ –≥–µ—Ä—Ü–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 60): ")
    try:
        refresh_rate = int(refresh_rate_input.strip())
        return refresh_rate
    except ValueError:
        print("‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É —ç–∫—Ä–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        exit(1)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —è–¥–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –≤—Ä—É—á–Ω—É—é
def get_cpu_cores_from_user():
    cpu_cores_input = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8): ")
    try:
        cpu_cores = int(cpu_cores_input.strip())
        return cpu_cores
    except ValueError:
        print("‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        exit(1)

# ==== –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ====
print("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π:")
print("1 - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
print("2 - –í–≤–µ—Å—Ç–∏ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é")
choice = input("–í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2: ").strip()

if choice == "1":
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
    set_console_title("SM: WOS BUILDER - –í–´–ë–û–† –†–ï–ñ–ò–ú–ê")
    print("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π...")
    
    width, height = get_auto_resolution()
    set_console_title("SM: WOS BUILDER - –§–ò–ù–ò–®")
    print(f"–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {width}x{height}")
    
    refresh_rate = get_screen_refresh_rate()
    print(f"–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ —ç–∫—Ä–∞–Ω–∞: {refresh_rate} Hz")
    
    cpu_cores = get_cpu_cores()
    print(f"–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä: {cpu_cores}")
    
elif choice == "2":
    # –†—É—á–Ω–æ–π –≤–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏–π
    set_console_title("SM: WOS BUILDER - –í–´–ë–û–† –†–ê–°–®–ò–†–ï–ù–ò–Ø –≠–ö–†–ê–ù–ê")
    print("–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é...")
    
    width, height = get_resolution_from_user()
    
    set_console_title("SM: WOS BUILDER - –í–´–ë–û–† –ö–û–õ–ò–ß–ï–°–¢–í–ê –ü–û–¢–û–ö–û–í")
    refresh_rate = get_refresh_rate_from_user()
    
    set_console_title("SM: WOS BUILDER - –í–´–ë–û–† –ß–ê–°–¢–û–¢–´ –î–ò–°–ü–õ–ï–Ø")
    cpu_cores = get_cpu_cores_from_user()
    
else:
    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    exit(1)

# XML-—à–∞–±–ª–æ–Ω
xml_content = f'''<?xml version="1.0" encoding="utf-8"?>
<r>
\t<s id="Version">7</s>
\t<s id="VideoDesiredW">0</s>
\t<s id="VideoDesiredH">0</s>
\t<s id="VideoVSync">1</s>
\t<s id="VideoParticles">1</s>
\t<s id="VideoShadows">1</s>
\t<s id="VideoPostProcFx">1</s>
\t<s id="MouseSens">50</s>
\t<s id="ActionLeft">286</s>
\t<s id="ActionRight">288</s>
\t<s id="ActionForward">273</s>
\t<s id="ActionBackward">287</s>
\t<s id="ActionSuit">314</s>
\t<s id="ActionWallCrawl">272</s>
\t<s id="ActionWallSprint">274</s>
\t<s id="ActionTarget">271</s>
\t<s id="ActionSwing">525</s>
\t<s id="ActionJump">313</s>
\t<s id="ActionShoot">300</s>
\t<s id="ActionAttack">524</s>
\t<s id="ActionWebStrike">302</s>
\t<s id="ActionUpgrades">289</s>
\t<s id="ActionAllyPrev">459</s>
\t<s id="ActionAllyNext">461</s>
\t<s id="ActionAllySummon">464</s>
\t<s id="ActionAllyDismiss">456</s>
\t<s id="ActionCenterCamera">526</s>
\t<s id="VideoW">{width}</s>
\t<s id="VideoH">{height}</s>
\t<s id="Windowed">0</s>
\t<s id="MaxCpuCount">{cpu_cores}</s>
\t<s id="VideoHz">{refresh_rate}</s>
\t<s id="MouseMinSens">0.00075</s>
\t<s id="MouseMaxSens">0.00025</s>
</r>
'''

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
folder_path = os.path.join(os.environ["USERPROFILE"], "AppData", "Local", "Activision", "Spider-Man Web of Shadows")
os.makedirs(folder_path, exist_ok=True)
file_path = os.path.join(folder_path, "Config.xml")

with open(file_path, "w", encoding="utf-8") as f:
    f.write(xml_content)

# –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
print(f"\nüíæ –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
print(f"üñº –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {width}x{height}")
print(f"üíª –ü–æ—Ç–æ–∫–æ–≤ CPU: {cpu_cores}")
print(f"üìà –ß–∞—Å—Ç–æ—Ç–∞ —ç–∫—Ä–∞–Ω–∞: {refresh_rate} Hz")

# –û–∂–∏–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏, —á—Ç–æ–±—ã –∫–æ–Ω—Å–æ–ª—å –Ω–µ –∑–∞–∫—Ä—ã–ª–∞—Å—å
input("\n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
